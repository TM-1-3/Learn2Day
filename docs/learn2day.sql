PRAGMA FOREIGN_KEYS = ON;

DROP TABLE IF EXISTS SCHOOL_INSTITUTION;

CREATE TABLE SCHOOL_INSTITUTION(
    NAME VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO SCHOOL_INSTITUTION (NAME) VALUES
('Xavier School for Gifted Youngsters'),
('Hogwarts'),
('School of Life'),
('Tech Academy');

DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS(
    ID_USER INTEGER PRIMARY KEY AUTOINCREMENT,
    USERNAME VARCHAR(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    TYPE VARCHAR(255) NOT NULL CHECK (TYPE IN ('STUDENT', 'TUTOR', 'ADMIN'))
);



DROP TABLE IF EXISTS STUDENT;

CREATE TABLE STUDENT(
    ID_STUDENT VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    PROFILE_IMAGE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    SCHOOL_INSTITUTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (ID_STUDENT),
    FOREIGN KEY (ID_STUDENT) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY (SCHOOL_INSTITUTION) REFERENCES SCHOOL_INSTITUTION(NAME) ON DELETE CASCADE
);




DROP TABLE IF EXISTS TUTOR;

CREATE TABLE TUTOR(
    ID_TUTOR VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    PROFILE_IMAGE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    SCHOOL_INSTITUTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (ID_TUTOR),
    FOREIGN KEY (ID_TUTOR) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY (SCHOOL_INSTITUTION) REFERENCES SCHOOL_INSTITUTION(NAME) ON DELETE CASCADE
);


CREATE TABLE ADMIN(
    ID_ADMIN VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    PROFILE_IMAGE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    PRIMARY KEY (ID_ADMIN),
    FOREIGN KEY (ID_ADMIN) REFERENCES USERS(USERNAME) ON DELETE CASCADE
);


DROP TABLE IF EXISTS STUDENT_TUTOR;

CREATE TABLE STUDENT_TUTOR(
    STUDENT INTEGER REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    PRIMARY KEY (STUDENT, TUTOR)
);



DROP TABLE IF EXISTS REQUEST;

CREATE TABLE REQUEST(
    ACCEPTED BOOLEAN NOT NULL DEFAULT FALSE,
    STUDENT INTEGER REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    PRIMARY KEY (STUDENT, TUTOR)
);


DROP TABLE IF EXISTS RATING;

CREATE TABLE RATING (
    ID_RATING INTEGER PRIMARY KEY AUTOINCREMENT,
    CLASSIFICATION INTEGER CHECK (
        CLASSIFICATION >= 0 AND 
        CLASSIFICATION <= 5 AND 
        (CLASSIFICATION * 10) % 5 = 0
    ),
    COMMENTARY TEXT,
    STUDENT_ID INTEGER NOT NULL,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE
);



DROP TABLE IF EXISTS DAY;

CREATE TABLE DAY(
    WEEK_DAY VARCHAR(255) NOT NULL PRIMARY KEY,
    CHECK (WEEK_DAY IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'))
);

INSERT INTO DAY (WEEK_DAY) VALUES
('Monday'),
('Tuesday'),
('Wednesday'),
('Thursday'),
('Friday'),
('Saturday'),
('Sunday');

DROP TABLE IF EXISTS STUDENT_AVAILABILITY;

CREATE TABLE STUDENT_AVAILABILITY(
    STUDENT INTEGER REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    WEEK_DAY VARCHAR(255) REFERENCES DAY(WEEK_DAY) ON DELETE CASCADE,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    PRIMARY KEY (STUDENT,WEEK_DAY)
);



DROP TABLE IF EXISTS TUTOR_AVAILABILITY;

CREATE TABLE TUTOR_AVAILABILITY(
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    WEEK_DAY VARCHAR(255) REFERENCES DAY(WEEK_DAY) ON DELETE CASCADE,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    PRIMARY KEY (TUTOR, WEEK_DAY)
);



DROP TABLE IF EXISTS CONTACT;

CREATE TABLE CONTACT(
    STUDENT INTEGER REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    WEEK_DAY VARCHAR(255) REFERENCES DAY(WEEK_DAY) ON DELETE CASCADE,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    PRIMARY KEY (STUDENT, TUTOR)
);



DROP TABLE IF EXISTS LANGUAGE;

CREATE TABLE LANGUAGE(
    DESIGNATION VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO LANGUAGE (DESIGNATION) VALUES
('English'),
('Spanish'),
('French'),
('German'),
('Mandarin'),
('Japanese'),
('Portuguese'),
('Russian'),
('Arabic'),
('Italian');


DROP TABLE IF EXISTS STUDENT_LANGUAGE;

CREATE TABLE STUDENT_LANGUAGE(
    STUDENT VARCHAR(225) REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    LANGUAGE VARCHAR(255) REFERENCES LANGUAGE(DESIGNATION) ON DELETE CASCADE,
    PRIMARY KEY (STUDENT, LANGUAGE)
);



DROP TABLE IF EXISTS TUTOR_LANGUAGE;

CREATE TABLE TUTOR_LANGUAGE(
    TUTOR VARCHAR(225) REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    LANGUAGE VARCHAR(255) REFERENCES LANGUAGE(DESIGNATION) ON DELETE CASCADE,
    PRIMARY KEY (TUTOR, LANGUAGE)
);



DROP TABLE IF EXISTS SUBJECT;

CREATE TABLE SUBJECT(
    DESIGNATION VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO SUBJECT (DESIGNATION) VALUES
('Português'),
('Matemática'),
('Estudo do Meio'),
('Inglês'),
('História e Geografia de Portugal'),
('Ciências Naturais'),
('Francês'),
('Espanhol'),
('História'),
('Geografia'),
('Físico-Química'),
('Alemão'),
('Filosofia'),
('Biologia e Geologia'),
('Física e Química '),
('Geometria Descritiva'),
('Economia'),
('Matemática Aplicada às Ciências Sociais'),
('Desenho'),
('História e Cultura das Artes');


DROP TABLE IF EXISTS TUTOR_LEVEL;

CREATE TABLE TUTOR_LEVEL(
    DESIGNATION VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO TUTOR_LEVEL (DESIGNATION) VALUES
('1st Cycle'),
('2nd Cycle'),
('3rd Cycle'),
('Secondary School');

DROP TABLE IF EXISTS STUDENT_LEVEL;

CREATE TABLE STUDENT_LEVEL(
    DESIGNATION VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO STUDENT_LEVEL (DESIGNATION) VALUES
('Grade 1'),
('Grade 2'),
('Grade 3'),
('Grade 4'),
('Grade 5'),
('Grade 6'),
('Grade 7'),
('Grade 8'),
('Grade 9'),
('Grade 10'),
('Grade 11'),
('Grade 12');

DROP TABLE IF EXISTS STUDENT_SUBJECT;

CREATE TABLE STUDENT_SUBJECT(
    STUDENT INTEGER REFERENCES STUDENT(ID_STUDENT) ON DELETE CASCADE,
    SUBJECT VARCHAR(255) REFERENCES SUBJECT(DESIGNATION) ON DELETE CASCADE,
    GRADE INTEGER NOT NULL,
    CHECK (GRADE>=1 AND GRADE<=12),
    PRIMARY KEY (STUDENT, SUBJECT)
);




DROP TABLE IF EXISTS TUTOR_SUBJECT;

CREATE TABLE TUTOR_SUBJECT(
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    SUBJECT VARCHAR(255) REFERENCES SUBJECT(DESIGNATION) ON DELETE CASCADE,
    GRADE INTEGER NOT NULL,
    CHECK (GRADE>=1 AND GRADE<=12),
    PRIMARY KEY (TUTOR, SUBJECT)
);



DROP TABLE IF EXISTS DEGREE;

CREATE TABLE DEGREE(
    DESIGNATION VARCHAR(255) NOT NULL PRIMARY KEY
);

INSERT INTO DEGREE (DESIGNATION) VALUES
('Chemical Engineering'),
('Literature'),
('History and Philosophy'),
('Mechanical Engineering'),
('Computer Science'),
('Physics Engineering');

DROP TABLE IF EXISTS TUTOR_DEGREE;

CREATE TABLE TUTOR_DEGREE(
    TUTOR INTEGER REFERENCES TUTOR(ID_TUTOR) ON DELETE CASCADE,
    DEGREE VARCHAR(255) REFERENCES DEGREE(DESIGNATION) ON DELETE CASCADE,
    UNIVERSITY VARCHAR(255) NOT NULL,
    PRIMARY KEY (TUTOR, DEGREE)
);
